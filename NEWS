Look into ChangeLog file for full list of changes.

0.13.6 - 0.13.7
  * Fix conditional jump or move depends on uninitialised value

0.13.5 - 0.13.6
  * Add support for tracing via HTTP X- headers (thanks to Dmitry Salomatin)
  * Security: Disable SSLv3 (issue #4)

0.13.4 - 0.13.5
  * Stability: Fix crash on parsing requests/responses with empty root <value>
    parameter (Thanks to Evgeny Dontsov).
  * Minor build and installation fixes (Thanks to Joseph VanAndel).

0.13.3 - 0.13.4
Fix compilation on Windows when OpenSSL 1.0.2 is used.

0.13.2 - 0.13.3
Remove reduntant socket close in client connection.

0.13.1 - 0.13.2
Compilatibility: Ignore XML namespaces in request's tag names.

0.13 - 0.13.1
Stability: fix socket leakage in client when connection process is timed out.

0.12.12 - 0.13
  This realease is binary incompatible with previous ones!

  * Client: do not resolve target host from client when proxy is used.
  * Server: fix memory leak when client refuses to read from socket.
  * Fix XML build during stack unwinding due to exception. I.e. allow call XML-RPC from destructors.
  * Some code cleanups aim future maintenance ease.

0.12.11 - 0.12.12
Fix thread safety issues during HTTP packet generation. Reproduced on Windows only. 

0.12.10 - 0.12.11
Fix client hangs on Windows in case of connection errors.

0.12.9 - 0.12.10
Fix building with libxml2 < 2.7.3 (broken in 0.12.6).

0.12.8 - 0.12.9
Support for weird clients: ability to omit <string> tag names in server responses.

0.12.7 - 0.12.8
Reimplementation of changes in 0.12.7: Allow configure if empty int/i4 tags are
allowed, specify default int value. 

0.12.6 - 0.12.7
Fix complatibility with some clients: treat empty int/i4 tags as zero integer.

0.12.5 - 0.12.6
Fix parsing errors for string/binary nodes > 10Mb.

0.12.4 - 0.12.5
Add support for SSL connections verification. There is possibility to verify
client or server certificates natively by OpenSSL. Optionally one can implement
custom verifier, e.g. to check for specific certificate's fingerprint, etc.

0.12.3 - 0.12.4
Support for Visual Studio 2012 and 64bit Windows.

0.12.2 - 0.12.3
  * Stability: Fix OpenSSL locking initialization (Thanks to Jeff Wildgen).
  * Security: Disable SSLv2 completely.

0.12.1 - 0.12.2
  * Fix build out of source tree.

0.12 - 0.12.1
  * Fix parser behavior on systems with libxml2 <= 2.6.16.
  * Send "HTTP/1.1 100" only once on long/framed requests.
  * Fix compilation warnings on Unices.

0.11.1 - 0.12
  API Changes:
    * New Struct::find and Struct::erase methods

  Security/Stablity/Compliance/Bugs:
    * Fix XXE vuln. on old libxml2 implementations.
    * Change server's backlog to 100 (was 5).
    * Fix some memory leaks on corner cases.
    * Fix complatibility with Curl-based clients that send expect:100-continue
    * Initialize OpenSSL-locking on library load (if it was not initialized)
    * Initialize libxml2 properly for supporting thread-safety
    * Fix non-blocking connector (client) on Windows

  Build and Platforms:
    * Full-fledged support for Mac OS X
    * Compilation fix on Solaris
    * Support for Boost > 1.50
    * Working builds (and tests) on Windows with CMake

0.11 - 0.11.1
* Fix xml-writer compatibility with libxml2-2.6.

0.10.1 - 0.11
* Fix parser's incorrect behavior for some corner cases.
* Move away from automake to cmake.

0.10.0 - 0.10.1
* Fix incorrect dump/parse of fault responses.
* Fix COREDUMPS on empty values during request/response parsing.

0.9.0 - 0.10.0
  This realease is binary incompatible with previous ones!

  News:
    The library is now licensed under 2-clause BSD license.

  Enchancements:
    * New XML parser and XML serializer based on libxml2 xmlreader/xmlwriter
      technology. This change DRAMATICALLY decreases memory usage of XML parse/dump tasks
      for LARGE datasets and significantly improves XML parse/dump performance
      (20-30%) for LARGE datasets.
    * Get rid of libxml++ dependency.

  Fixes:
    * Fixes broken requests with authorization with big enough login/password pair.
    * Fix socket resource leak in case of error occured during connection process.
    * Fix build with openssl 1.0 (by Max Khon).

0.8.10 - 0.9.0
  This realease is binary incompatible with previous ones!

  * Firewall now sends HTTP 403 Forbidden as a default reject action.
  * Icrease buffer size for hostname calculations (thanks to Ryan Braud).
  * Fix hang in client during connection to server that rejects connections on specific port (thanks to Ryan Braud for bug report).
  * Fix coredump in case if name of struct member contains XML tags.
  * API enhancments: Http_server and Https_server allow binding to specific IP, not only port.

0.8.9 - 0.8.10
  * Client_base::set_timeout now affects connection process too.
  * Fix compatibility with xmlrpc++: do not throw error on absent
    <params> section in request.
  * Fix minor bug related to error reporting on different platforms.
  * Fix some warnings on Windows (James Adkison).

0.8.8 - 0.8.9
  * Fix compatibility with Perl XML-RPC: Do not validate "Connection" HTTP
    header option. Check if it contain "keep-alive" token otherwise ignore
    anything.

0.8.7 - 0.8.8
  * Increase thread-safety in Inet_addr class.
  * Increase thread-safety in Date_time, http server
    (by using boost data_time instead of localtime/gmtime functions).
  * Turn off XML-formatting for XML-RPC requests/responses.
  * Remove users guide from sources because it lives now at
    libiqxmlrpc.wikidot.com.

0.8.6a - 0.8.7
  This release introduces binary incompatibilities with 0.8.6a.

  Incompatibilities:
    * Binary compatibility with previous releases broken.
    * Unit test require Boost 1.34. Sorry, I have no enough mana to
      maintain different boost branches for unit tests.
    * The to_xml method of Request and Response classes became private.
      Use new dump_xml functions that do not depend on XML parser library.

  Enhancements:
    * Now users able to construct/parse raw XML-RPC requests/responses
      by them-selves in order to achieve higher level of customization
      abilities.
    * Add support for GCC visibility "hidden" option.

  Fixes:
    * Error handling: http::Error_response now has response_header method
      so one will able find out HTTP error code and other information.
    * Hide most of implementation details of Value class. This change
      addresses binary incompatibilities issues.
    * Fix warning in headers during compilation by MSVC.

  Documentation:
    * New users guide added (still incomplete). Guide in a format of deplate.
      See http://deplate.sourceforge.net

0.8.6 - 0.8.6a
  * Fix undefined behavior in Pool_executor, introduced in 0.8.6.
  * Fix undefined behavior in http module built with MSVC 8.

0.8.5 - 0.8.6
  Several fixes related to starting/stopping server:
    * Server no longer wait for all open connections to close on exit.
      This is much more secure behavior.
    * Now it is safe using the same Server object after work/set_exit_flag
      cycle.
    * Fix thread-leaks in Pool_executor_factory.

  Compilation fix on Windows.

0.8.4a - 0.8.5
  This release introduces interface incompatibilities with 0.8.4.

  Interface changes:
      An interface of Auth_Plugin_base has been changed. Now one must implement
      do_authenticate_anonymous instead of transfering flag to Auth_Plugin_base
      constructor. 

  Fixes:
    * The fix allows one to stop server by calling Server::set_exit_flag from
      another thread. This fix should also allow run multiple HTTP servers
      in one process.
      
      This change was inspired by Mikko Sarmanne's patch.

0.8.4 - 0.8.4a
  Fixes:
    * Update MSVC project file.
    * Fix unresolved symbols error when one try use Client_base::set_proxy
    * Enhance compatibility with HTTP proxies (e.g. Privoxy). Put full URI in
      POST header line when client configured work through HTTP proxy.

0.8.3 - 0.8.4
  New features:
    * HTTP Authorization (client and server).
    * HTTP(S) Proxy support (on client side).

  Fixes:
    * Make Array::const_iterator compatible with STL iterators.
    * Get rid of leading \n character in encoded base64.
    * Send correct HTTP error packets on HTTP exceptions.
    * Code cleanups, refactoring.
    * Compilation warning fixes on Windows (thanks to Max Khon).

0.8.2a - 0.8.3
  Additions:
    * Debian packaging.

  Fixes:
    * Do not throw exception on select/poll interruption with some signal.
      E.g during binding with gdb to an existing process.
    * Refinement for Windows build: now all library dependences should be
      placed in a single directory, which should be stated with DEPENDS_ROOT
      environment variable.

0.8.2 - 0.8.2a
  Enhancement:
    * The two level of verification for HTTP options introduced. By default
      weakest level is turned on. One can raise verification level on server
      side by calling Server::set_verification_level method.
    * Sanity checking for contents of Content-Type is turned off by default.
      So one can use 'curl' utility without specifying -H "Content-Type: text/xml"
      parameter.

0.8.1 - 0.8.2
  Bugfixes:
    * Fix communication bug with xmlrpc-c introduced in 0.8.1. Now libiqxmlrpc
      just searches for inclusion of 'text/xml' string in Content-Type
      instead of trying parse it in more smart way.

0.8 - 0.8.1
  Bugfixes:
    * [ 1564903 ] Fix core dump that appear on malformed HTTP packet, when
      Content-Type not set. Actually I have rewritten mini HTTP parser from
      scratch.

  Enhancements, clean-ups:
    * The inner per-connection buffer's size has been increased for better
      performance.
    * Configure script no longer searches for boost-unit-test-framework
      by default.

0.7.3a - 0.8
  This release has several incompatibility points with previous ones:

    * Library does no longer support introspection through customized children
      classes of Method::Help. I am considering that technique quite ugly now
      and planning to re-implement introspection scheme in future. However
      system.listMethods still available.
    * With compilation fix for g++ 3.2 the Server class has lost
      register_method template method. Now one should prefer use free
      register_method functions instead of Server::register_method.

  New features:

    * External method dispatchers. This feature allows users to create
      customized method dispatchers, which would do some problem-specific
      things. E.g map XML-RPC requests to CORBA method calls (as I do), etc.
    * Full-fledged Windows port.
    * Recursive printing of values in perl-like form 
      (iqxmlrpc::print_value function).

  Bugfixes & code clean-ups (in order of importance):

    * Fix compatibility with another XML-RPC engines:
      - treat <value/> as empty string value (xmlrpc++);
      - ignore ';' symbol in media-type HTTP parameter (xmlrpc-c);
      - treat text values of HTTP paramters in case insensentive way.
    * Fix coredump that appears in multi-threaded server with many threads
      under high loads.  
    * Compilation fix for g++ 3.2
    * Get rid of dependecy on libxml++ in public headers.
    * Make Response object much more cheaper for copying.

0.7.3 - 0.7.3a
  * Compilation fix for boost in some environments.

0.7.2 - 0.7.3
  * Compilation fix for gcc 4.1.1
    (thanks to Tiziano Mueller).
  * Compilation fix for Cygwin
    (thanks to George Pantazopoulos).
  * Compilation fix for MSVC++ 7.1.
  * Now configure script treats boost configuration in more smart way 
    with m4 macro.
    (thanks to George Pantazopoulos).
  * Now one can request pretty-print type name via Value::type_name 
    (Value::debug_type was removed!).

0.7.1 - 0.7.2
  * Compilation fix for GNU C++ >= 3.4
  * Remove last (I hope) obstacle of making library platform-independent:
    Replace Alarm_socket with platform-independent Reactor_interrupter.

0.7 - 0.7.1
Two new features were added:
  * Support for server-side method interceptors.

    I.e. one can wrap calls of XML-RPC methods with arbitrary amount of
    interceptors, which will do some useful job concerning any aspects, which
    orthogonal in relation to actual method's functionality.  E.g. such tasks
    as call logging, exception's handling, and security policy treatment can
    be addressed by this feature.
  
  * Ability to register plain function as XML-RPC method implementation.

    The functions with specific signature can be registered with server as
    request handlers.  Moreover the new common interface for registering
    methods with the server is introduced (while old one still remains correct
    too):

      Server s;
      register_method<MyMethod>(s, "my_method");
      register_method(s, "method2", my_function);

   An old code that was wored with prev version of library is source-level
   compatible with this version.

0.6.5 - 0.7
  This release incorporates big code changes. I believe that quality of 
  code have been greatly improved since new test suite had been intoduced.
  It allowed me to find quite interesting bugs.

  Unfortunately, the win32 port is not up-to-date. But that fact that
  I have replaced my "threads stuff" with boost::thread allows one 
  to port the whole library to Windows without much pain 
  (Alarm_sock is still an issue).

  Documentation is not in sync now too. It is related to guides embeded into
  doxygen docs. But I dont think that it is big issue: there is great test
  suite.

  New features:
    * Major test suite improvement: now there is automatic regression test
      based on boost unit test framework. It also includes stress test.
    * Now boost::thread used instead of home-made threads implementation.
    * Improved server-side interface: user methods can access server via
      special restricted interface (e.g. user's method can stop the whole
      server now, etc).

  Interface changes:
    * English refining: all words/names "fabric" replaced with "factory".
    * Now one should not use Server class directly but its children:
      Http_server or Https_server.
    * Value, Array, Struct interface changed a bit.

  Fixes:
    * Multithreading bug founded by stress test.
    * Exception safety improved.
    * Other minor fixes.

0.6.4 - 0.6.5
  * Distribution now includes configure made by autoconf-2.57.
  * An argument --disable-docs for configure has been added.
  * Some compilation fixes for win32 were made as well.
  
0.6.3 - 0.6.4
  * Better support for standard algorithms usage with iqxmlrpc::Array added.
    I.e. now one can use std::back_inserter, std::front_inserter 
    (not std::inserter) with Array and so on.
  * Support for client's persistent connections has been added
    (see iqxmlrpc::Client::set_keep_alive).
  * Minor client's code clean-up and documentation updates were made.
  
0.6.2 - 0.6.3
  * Now users' server methods aware about peer's address (Method::peer_addr()).
  * Remove 'const' modifier from Firewall_base::grant() method.
  * Other minor interface additions/code clean-ups.
  
  Fixes:
    * Properly remove used connections on client side.
    * Fix several bugs regarding socket functionality.

0.6.1 - 0.6.2
  New features:
    * Added support for optional user's firewall classes. They may decide
      whether Server should accept request from specific inet address
      (see iqnet::Firewall_base).
    * Added postfix version of ++ and -- operators to	Array::const_iterator.
    * Added libiqxmlrpc-server.pc, libiqxmlrpc-client.pc in addition to just
      libiqxmlrpc.pc.

  Fixed:
    * Client now throws iqxmlrpc::Exception rather then iqxmlrpc::Fault when
      in receives fault response from server.
    * Fixes incorrect copy constructor and operator = of class Array.
      So now one can safely do things like that:
        Array a = some_value.the_array();
    * Fix incorrect Response's copy constructor and operator =. Now one can
      safely use single Response object many times:
        Response r = client.execute( ... );
        //...
        r = client.execute( ... );
    * Got rid of some static staff which gaves errors in some conditions.
        
0.6 - 0.6.1
  * Fix compilation error on Windows.

0.5.5 - 0.6
  * Added support for server introspection.
  * Added support for Fault Code Interoperability standard.
  * Added transparent charset conversion support.
  * Fix compilation troubles on Win32.

0.5.4 - 0.5.5
  * Fix uninitialized Client::non_blocking_flag.
  * Improve treatment of socket related errors.
  * Minor clean ups.

0.5.3 - 0.5.4
  Implemented copy constructors and = operators for Array and Struct
	calsses.

0.5.2 - 0.5.3
  Fixes:
    * Fix possible hang/crash in Reactor's code during secure connection.
    * Code clean up regarding portability on VC++.

  Interface additions:
    * Added Array::const_iterator and begin/end interface.
    * Added Value::arr_begin/end() interface for access to Array::const_iterator.
    * Added const eqivs for Value::the_array() and Value::the_struct().

0.5.1 - 0.5.2
  * Added support for (non-standard) Nil datatype.
  * Got rid of of some useless and buggy code.
  * Got rid of useless VS2003 files to reduce dist's size.

0.5 - 0.5.1
  * Added ability to specify maximum size of HTTP request 
    in Server class interface via Server::set_max_request_sz().
  * Code clean.

0.4.3 - 0.5
  * Remove client's and server's headers from libiqxmlrpc.h.
    So one must include extra headers in addition to libiqxmlrpc.h.
  * Fix server's crash on exception in its particular connection object.
  * Minor architecture refactoring and code cleaning.

0.4.2 - 0.4.3
  * Port client part of library on Win32 (use MS VS 2003).

0.4.1 - 0.4.2
  * Make it portable on Solaris.
  * Fix some minor errors.
  * Client's code uses non-blocking socket only when timeout has been specified.

0.4 - 0.4.1
  * Fix compilation problem on G++ 3.4
  * Get rid of several compiler's warnings.
  * Fix documentation.

0.3.2 - 0.4
  * Added support for XML-RPC dateTime.iso8601 data type.

0.3.1 - 0.3.2
  * Added support for XML-RPC base64 datatype.

0.3 - 0.3.1
  * Move HTTP(S) clients to non-blocking socket. This allows to set timeout to
    client.
  * Various code clean-ups, minor sources reorganizing.
  * Documentation updates.

0.2.3 - 0.3
  * Add ability to run server methods in a pool of threads.
  * Minor code cleaning.
  * Update documentation.

0.2.2 - 0.2.3
  * Fix compilation problem with (new?) compilers.
  * Fix libiqxmlrpc.pc

0.2.1 - 0.2.2
  * Merge inner subproject libiqnet into main code.
  * Simplify library exceptions system.
  * Added facility to log exceptions into Server class.

0.2 - 0.2.1
  * Some fixes for HTTP protocol.
  * Minor interface fixes/improvements.
  
0.1.1 - 0.2
  * Library architecture refactoring. Add ability to add alternative method's
    execution policies. Got rid of useless classes.
  * Use select() syscall if poll() is not present in a system.
  * Various minor bug and style fixes.
  * Update documentation.

0.1.0 - 0.1.1
  * Fix some build problems;
  * Documentation update;
  * Make documentation be installed on 'make install';
  * Create RPM .spec file.
